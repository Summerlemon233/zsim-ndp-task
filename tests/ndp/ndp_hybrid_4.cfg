// Tests zsim APIs.

sys = {
    cores = {
        ndp_core = {
            cores = 3;
            type = "Timing";
            dcache = "ndp_l1d";
            icache = "ndp_l1i";
        };
        host_core = {
            cores = 1;
            type = "OOO";
            dcache = "l1d";
            icache = "l1i";
        }
    };

    lineSize = 64;

    caches = {
        ndp_l1d = {
            caches = 3;
            size = 65536;
        }
        ndp_l1i = {
            caches = 3;
            size = 32768;
        }
        ndp_l2  = {
            type = "CCHub";
            caches = 1;
            # banks = 3;
            size = 262144;
            protocol =
            {
                type = "Directory";
                forwarding = False;
            };
            children = "ndp_l1d|ndp_l1i";
        }
        l1d = {
            caches = 1;
            size = 65536;
        };
        l1i = {
            caches = 1;
            size = 32768;
        };
        l2 = {
            caches = 1;
            size = 262144;
            children = "l1d|l1i";
        }
        l3 = {
            caches = 1;
            size = 1048576;
            children = "l2";
        }
        l3-hub = {
            type = "CCHub";
            banks = 4;
            size = 8388608;
            protocol =
            {
                type = "Directory";
                forwarding = False;
            };
            children = "ndp_l2|l3";
        };
    };

    mem = {
        splitAddrs = False;
        controllers = 4;
        type = "Channel";
        channelType = "DDR";
        channelFreq = 1200;
        burstCount = 8;  # DDR4
        pageSize = 1024;
        pagePolicy = "close";
        deviceIOWidth = 8;
        channelWidth = 64;
        queueDepth = 64;

        bankGroupsPerRank = 4;  # 4 bank groups
        banksPerRank = 16;  # 4 banks per group
        ranksPerChannel = 2;

        timing = {
            tCAS = 17;
            tRCD = 17;
            tRP = 17;
            tRAS = 39;  # 32 ns
            tCCD = 6;  # max(4, 5 ns)
            tCCD_S = 4;
            tRRD = 6;  # max(4, 4.9 ns)
            tRRD_S = 4;  # max(4, 3.3 ns)
            tWTR = 9;  # max(4, 7.5 ns)
            tWTR_S = 3;  # max(2, 2.5 ns)
            tWR = 18;  # 15 ns
            tRTP = 9;  # max(4, 7.5 ns)
            tFAW = 25;  # max(20, 21 ns)
            tRTRS = 2;  # Song and Ipek, MICRO'15
            tRFC = 420;  # tRFC1 = 350 ns for 8 Gb
            tREFI = 9360;  # 7.8 us
            tXP = 8;  # max(4, 6 ns)
        };
        power = {
            # merged VDD = 1.2 V, VPP = 2.5 V
            VDD = 1.2;
            IDD0 = 54.3;  # 48, 3
            IDD2N = 40.3;  # 34, 3 (= IPP3N)
            IDD2P = 31.3;  # 25, 3 (= IPP3N)
            IDD3N = 54.3;  # 48, 3
            IDD3P = 43.3;  # 37, 3 (= IPP3N)
            IDD4R = 141.3;  # 135, 3 (= IPP3N)
            IDD4W = 138.3;  # 132, 3 (= IPP3N)
            IDD5 = 666.9;  # 58, 5 (5R, (5B - 2N) / (5R - 2N) = tREFI / tRFC)
            channelWirePicoJoulePerBit = 5.63;
        };
    };

    interconnects ={
        interconnect = {
            interface0 = {
                parent = "l3-hub";
                addressMap = {
                    type = "NUMA";
                };
                ignoreInvLatency = True;  # ideal coherence
            };

            interface1 = {
                parent = "mem";
                addressMap = {
                    type = "NUMA";
                }
                ignoreInvLatency = True;
            }

            routingAlgorithm = {
                type = "Mesh2DDimensionOrder";
                dimX = 2;
                dimY = 2;
            }
            routers = {
                type = "Timing";
                latency = 10;
                portWidth = 128;
            }
            ccHeaderSize = 0;
        }
    }
    numa = True;
};

process0 = {
    command = "/zsim-ndp/ndpool/benchmarks/build/test_apps/ndp/matrix-mul";
    patchRoot = "/zsim-ndp/ndpool/myPatchRoot/patchRoot-4c4n";  # generate this patch first
    startFastForwarded = True;
};

