sys = {
    cores = {
        c = {
            cores = 16;
            type = "TaskTiming";
            dcache = "l1d";
            icache = "l1i";
        };
    };

    frequency = 2400;

    pimBridge = {
        simCommEvent = True;
        cleanStealInterval = 500; # 0 means never clear
        commModules = {
            level0 = {
                numModules = 16;
                enableInterflow = False;
                remapTableType = "Unlimited";
                remapTableSet = 64;
                remapTableAssoc = 32;
            };
            level1 = {
                numModules = 1;
                enableInterflow = False;
                enableLoadBalance = True;
                remapTableType = "Unlimited";
                remapTableSet = 2048;
                remapTableAssoc = 64;
                gatherScheme = {
                    trigger = "Never"
                    interval = 1;
                    packetSize = 310;
                };
                scatterScheme = {
                    trigger = "AfterGather";
                    packetSize = 310;
                }
            };
        }
        profilers = {
            profiler1 = {
                type = "Gather";
                enable = False;
                pathPrefix = "/zsim-ndp/zsim-ndp-task/zsim_results/gp-dint10-5";
            }
        }
        loadBalancer = {
            enable = False;
            lbPageSize = 4096;
            dynamicThreshold = True;
            # dynamicThreshold = False;
            victimThreshold = 60;
            # victimThreshold = 2;
            stealerThreshold = 30;
            # stealerThreshold = 1;
            chunkScheme = "Static";
            # chunkScheme = "HalfVictim";
            chunkSize = 30;
            victimNumber = 3;
            type = "Stealing";
            # type = "Average";
            # type = "Reserve";
        };
    };

    taskSupport = {
        enable = True;
        simTaskFetchEvent = True;
        taskUnitType = "Cpu";
        # taskUnitType = "ReserveLbPimBridge";
    };

    lineSize = 64;

    caches = {
        l1d = {
            caches = 16;
            size = 65536;
        };
        l1i = {
            caches = 16;
            size = 32768;
        };
        l2 = {
            caches = 16;
            size = 262144;
            children = "l1d|l1i";
        };
        l3 = {
            size = 2097152;
            banks = 2;
            children = "l2";
        }
    };

    mem = {
        splitAddrs = False;
        controllers = 2;

        type = "Channel";

        channelType = "DDR";

		# Micron
		# 8gb_ddr4_dram.pdf - Rev. S 12/2020 EN, 8 Gb, x4/x8/x16, 1866/2133/2400/2666/2933/3200 MT/s
		# 16gb_ddr4_dram.pdf - Rev. G 08/2020 EN, 16 Gb, x4/x8/x16, 2933/3200 MT/s
        # See Speed Bin Tables, Electrical Characteristics and AC Timing Parameters, and Current Specifications â€“ Limits
		# Use 8 Gb, x8, -083 Grade, Die Rev. D

        channelFreq = 1200;
        burstCount = 8;  # DDR4
        pageSize = 1024;
        pagePolicy = "close";
        deviceIOWidth = 8;
        channelWidth = 64;
        queueDepth = 64;

        bankGroupsPerRank = 4;  # 4 bank groups
        banksPerRank = 16;  # 4 banks per group
        ranksPerChannel = 2;

        timing = {
            tCAS = 17;
            tRCD = 17;
            tRP = 17;
            tRAS = 39;  # 32 ns
            tCCD = 6;  # max(4, 5 ns)
            tCCD_S = 4;
            tRRD = 6;  # max(4, 4.9 ns)
            tRRD_S = 4;  # max(4, 3.3 ns)
            tWTR = 9;  # max(4, 7.5 ns)
            tWTR_S = 3;  # max(2, 2.5 ns)
            tWR = 18;  # 15 ns
            tRTP = 9;  # max(4, 7.5 ns)
            tFAW = 25;  # max(20, 21 ns)
            tRTRS = 2;  # Song and Ipek, MICRO'15
            tRFC = 420;  # tRFC1 = 350 ns for 8 Gb
            tREFI = 9360;  # 7.8 us
            tXP = 8;  # max(4, 6 ns)
        };
        power = {
            # merged VDD = 1.2 V, VPP = 2.5 V
            VDD = 1.2;
            IDD0 = 54.3;  # 48, 3
            IDD2N = 40.3;  # 34, 3 (= IPP3N)
            IDD2P = 31.3;  # 25, 3 (= IPP3N)
            IDD3N = 54.3;  # 48, 3
            IDD3P = 43.3;  # 37, 3 (= IPP3N)
            IDD4R = 141.3;  # 135, 3 (= IPP3N)
            IDD4W = 138.3;  # 132, 3 (= IPP3N)
            IDD5 = 666.9;  # 58, 5 (5R, (5B - 2N) / (5R - 2N) = tREFI / tRFC)

            # From DDR4_Power_Calc.xlsm.
            # Rd: RTTuC = 120, Rz1 = 34, RTTu2 = 40, Rs1 = Rs2 = 10 -> dq + term = 10.1 + 5.7 = 15.8 mW
            # Wr: RzC = 34, RTTu1 = 120, RTTu2 = 48, Rs1 = Rs2 = 10 -> dq + term = 3.2 + 7.3 = 10.5 mW
            # pJ/bit = ~12 mW / 2400 MHz * 9/8 (DQS overhead) = 5.625
            channelWirePicoJoulePerBit = 5.63;
        };
    };

    interconnects ={
        interconnect = {
            interface0 = {
                parent = "mem";
                addressMap = {
                    type = "NUMA";
                }
                ignoreInvLatency = True;
            };
            routingAlgorithm = {
                type = "Direct";
                terminals = 2;
            };
            routers = {
                type = "Simple";
                latency = 0; // we manually insert a memory access. No actual transfer happens in level-0;
                # portWidth = 2560;
            };
            ccHeaderSize = 0;
        }
    }
    numa = True;
};

sim = {
    gmMBytes = 65536;
    phaseLength = 10000;
    strictConfig = False;
    attachDebugger = True;
    debugPortId = 12123;
}

process0 = {
    # command = "/zsim-ndp/Ninjask-pimbridge-task/build/apps/spmv 512 /zsim-ndp/Ninjask-pimbridge-task/input/spmv/soc-Slashdot0811";
    command = "/zsim-ndp/Ninjask-pimbridge-task/build/apps/page_rank 16 /zsim-ndp/Ninjask-pimbridge-task/input/graph/Slashdot0811";
    # command = "/zsim-ndp/Ninjask-pimbridge-task/build/apps/tree 512 65536";
    patchRoot = "/zsim-ndp/zsim-ndp-task/myPatchRoots/patchRoot-16c2n";  # generate this patch first
    startFastForwarded = True;
};

