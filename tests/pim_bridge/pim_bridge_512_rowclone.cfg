sys = {
    cores = {
        c = {
            cores = 512;
            type = "TaskTiming";
            dcache = "l1d";
            icache = "l1i";
        };
    };

    frequency = 2400;

    pimBridge = {
        simCommEvent = True;
        # simCommEvent = False;
        cleanStealInterval = 500; # 0 means never clear
        commModules = {
            level0 = {
                numModules = 512;
                enableInterflow = False;
                remapTableType = "Unlimited";
                # remapTableType = "Limited";
                remapTableSet = 16;
                remapTableAssoc = 16;
            };
            level1 = {
                numModules = 64;
                enableInterflow = False;
                enableLoadBalance = True;
                remapTableType = "Unlimited";
                # remapTableType = "Limited";
                remapTableSet = 512;
                remapTableAssoc = 32;
                gatherScheme = {
                    # trigger = "OnDemandOfAll";
                    # trigger = "OnDemand";
                    # threshold = 32;
                    # maxInterval = 32;
                    trigger = "Interval"
                    # trigger = "DynamicInterval";
                    interval = 1;
                    # trigger = "DynamicOnDemand";
                    # highThreshold = 48;
                    # lowThreshold = 32;
                    # maxInterval = 32;
                    packetSize = 2500;
                };
                scatterScheme = {
                    trigger = "AfterGather";
                    interval = 1;
                    packetSize = 2500;
                }
            };
            level2 = {
                numModules = 1;
                enableInterflow = False;
                enableLoadBalance = True;
                remapTableType = "Unlimited";
                # remapTableType = "Limited";
                remapTableSet = 512;
                remapTableAssoc = 32;
                gatherScheme = {
                    # trigger = "OnDemandOfAll";
                    # trigger = "OnDemand";
                    # threshold = 48;
                    # maxInterval = 32;
                    trigger = "Interval";
                    # trigger = "DynamicInterval";
                    interval = 1;
                    packetSize = 2500;
                };
                scatterScheme = {
                    # trigger = "OnDemand";
                    # threshold = 8;
                    trigger = "AfterGather";
                    interval = 1;
                    packetSize = 2500;
                };
            };
        }
        profilers = {
            profiler1 = {
                type = "Gather";
                enable = False;
                pathPrefix = "/zsim-ndp/zsim-ndp-task/zsim_results/gp-dint10-5";
            }
        }
        loadBalancer = {
            enable = False;
            # enable = False;
            hierarchyAware = True;
            # hierarchyAware = False;
            # enable = False;
            lbPageSize = 256;
            dynamicThreshold = True;
            # dynamicThreshold = False;
            victimThreshold = 60;
            stealerThreshold = 30;
            # chunkScheme = "Static";
            chunkScheme = "Dynamic";
            # chunkScheme = "HalfVictim";
            chunkSize = 30;
            # victimNumber = 3;
            # type = "Stealing";
            type = "FastArrive";
            # type = "Average";
            # type = "Reserve";
        };
    };

    taskSupport = {
        enable = True;
        simTaskFetchEvent = True;
        taskUnitType = "PimBridge";
        # taskUnitType = "ReserveLbPimBridge";    
        sketchBucketNum = 16;
        sketchBucketSize = 16;
    };

    lineSize = 64;

    caches = {
        l1d = {
            caches = 512;
            size = 65536;
        };
        l1i = {
            caches = 512;
            size = 32768;
        };
        l2-hub = {
            type = "CCHub";
            banks = 512;
            size = 16777216;
            protocol =
            {
                type = "Directory";
                forwarding = False;
            };
            children = "l1d|l1i";
        };
    };

    mem = {
        splitAddrs = False;
        controllers = 512;
        type = "Channel";
        channelType = "DDR";
        channelFreq = 1200;
        burstCount = 8;  # DDR4
        pageSize = 4096;
        pagePolicy = "close";
        deviceIOWidth = 64;
        channelWidth = 64;
        queueDepth = 64;

        bankGroupsPerRank = 1;  # 4 bank groups
        banksPerRank = 1;  # 4 banks per group
        ranksPerChannel = 1;

        timing = {
            tCAS = 17;
            tRCD = 17;
            tRP = 17;
            tRAS = 39;  # 32 ns
            tCCD = 6;  # max(4, 5 ns)
            tCCD_S = 4;
            tRRD = 6;  # max(4, 4.9 ns)
            tRRD_S = 4;  # max(4, 3.3 ns)
            tWTR = 9;  # max(4, 7.5 ns)
            tWTR_S = 3;  # max(2, 2.5 ns)
            tWR = 18;  # 15 ns
            tRTP = 9;  # max(4, 7.5 ns)
            tFAW = 25;  # max(20, 21 ns)
            tRTRS = 2;  # Song and Ipek, MICRO'15
            tRFC = 420;  # tRFC1 = 350 ns for 8 Gb
            tREFI = 9360;  # 7.8 us
            tXP = 8;  # max(4, 6 ns)
        };
        power = {
            # merged VDD = 1.2 V, VPP = 2.5 V
            VDD = 1.2;
            IDD0 = 54.3;  # 48, 3
            IDD2N = 40.3;  # 34, 3 (= IPP3N)
            IDD2P = 31.3;  # 25, 3 (= IPP3N)
            IDD3N = 54.3;  # 48, 3
            IDD3P = 43.3;  # 37, 3 (= IPP3N)
            IDD4R = 141.3;  # 135, 3 (= IPP3N)
            IDD4W = 138.3;  # 132, 3 (= IPP3N)
            IDD5 = 666.9;  # 58, 5 (5R, (5B - 2N) / (5R - 2N) = tREFI / tRFC)
            channelWirePicoJoulePerBit = 5.63;
        };
    };

    interconnects ={
        interconnect = {
            interface0 = {
                parent = "l2-hub";
                addressMap = {
                    type = "NUMA";
                };
                ignoreInvLatency = True;  # ideal coherence
            };

            interface1 = {
                parent = "mem";
                addressMap = {
                    type = "NUMA";
                }
                ignoreInvLatency = True;
            };
            routingAlgorithm = {
                type = "Direct";
                terminals = 64;
            };
            routers = {
                type = "Simple";
                latency = 0; // we manually insert a memory access. No actual transfer happens in level-0;
                # portWidth = 2560;
            };
            upperLevel = {
                routingAlgorithm = 
                {
                    type = "Direct";
                    terminals = 8;
                }
                routers = {
                    type = "Simple"
                    latency = 0; // TODO: check the latency and bandwidth. 
                    # portWidth = 2560;
                }
            }
            ccHeaderSize = 0;
        }
    }
    numa = True;
};

sim = {
    gmMBytes = 131072;
    phaseLength = 10000;
    strictConfig = False;
    attachDebugger = True;
    debugPortId = 12123;
}

process0 = {
    # command = "/zsim-ndp/Ninjask-pimbridge-task/build/apps/spmv 512 /zsim-ndp/Ninjask-pimbridge-task/input/spmv/soc-Slashdot0811";
    # command = "/zsim-ndp/Ninjask-pimbridge-task/build/apps/linked_list 512 8192 128 65536";
    # command = "/zsim-ndp/Ninjask-pimbridge-task/build/apps/tree 512 8192";
    command = "/zsim-ndp/Ninjask-pimbridge-task/build/apps/page_rank 512 /zsim-ndp/Ninjask-pimbridge-task/input/graph/Slashdot0811";
    patchRoot = "/zsim-ndp/zsim-ndp-task/myPatchRoots/patchRoot-512";  # generate this patch first
    startFastForwarded = True;
};

